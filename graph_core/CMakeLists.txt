cmake_minimum_required(VERSION 3.8.0)
project(graph_core)


find_package(Eigen3 REQUIRED COMPONENTS core)
find_package(Boost REQUIRED COMPONENTS date_time filesystem)
find_package(PkgConfig REQUIRED)
pkg_check_modules(YAML_CPP REQUIRED yaml-cpp IMPORTED_TARGET)
#NOTE: New in version 3.6: The IMPORTED_TARGET argument will create an imported target named PkgConfig::<prefix> that can be passed directly as an argument to target_link_libraries().

find_package(cnr_logger REQUIRED)
find_package(cnr_param REQUIRED)


include_directories(
  ${cnr_logger_INCLUDE_DIRS}
  ${cnr_param_INCLUDE_DIRS}
 )



# DEFINE TARGET Library
add_library(graph_core SHARED
  src/${PROJECT_NAME}/graph/node.cpp
  src/${PROJECT_NAME}/graph/connection.cpp
  src/${PROJECT_NAME}/graph/tree.cpp
  src/${PROJECT_NAME}/graph/subtree.cpp
  src/${PROJECT_NAME}/graph/path.cpp
  src/${PROJECT_NAME}/graph/net.cpp

  src/${PROJECT_NAME}/samplers/informed_sampler.cpp
  src/${PROJECT_NAME}/samplers/tube_informed_sampler.cpp

  src/${PROJECT_NAME}/datastructure/kdtree.cpp
  src/${PROJECT_NAME}/datastructure/vector.cpp

  src/${PROJECT_NAME}/solvers/tree_solver.cpp
  src/${PROJECT_NAME}/solvers/rrt.cpp
  src/${PROJECT_NAME}/solvers/birrt.cpp
  src/${PROJECT_NAME}/solvers/rrt_star.cpp
  src/${PROJECT_NAME}/solvers/anytime_rrt.cpp

  src/${PROJECT_NAME}/solvers/path_optimizers/path_optimizer_base.cpp
  src/${PROJECT_NAME}/solvers/path_optimizers/path_local_optimizer.cpp
  )

add_library(graph_core::graph_core ALIAS graph_core)
# this alias is needed to import the library in other target of the same project

# set properties: in Modern CMake the properties are related to the target
set_target_properties(graph_core PROPERTIES
            CXX_STANDARD 17
            CXX_EXTENSIONS OFF
            )
target_compile_options(graph_core PRIVATE
  -funroll-loops -Ofast
  )
target_include_directories(graph_core
  PUBLIC
    $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include> #if BUILD_INTERFACE, add ${CMAKE_SOURCE_DIR}/include (headers taken by source directory)
    $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include> #if BUILD_INTERFACE, add ${CMAKE_SOURCE_DIR}/include (headers taken by autogenerated commands)
    $<INSTALL_INTERFACE:include> # if INSTALL_INTERFACE, add header from install path
  PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
  )

target_link_libraries(graph_core PUBLIC
  Eigen3::Eigen # target automatically import all the staff that is needed
  Boost::date_time
  Boost::filesystem
  PkgConfig::YAML_CPP
  ${cnr_logger_LIBRARIES}
  ${cnr_param_LIBRARIES}
)



# DEFINE TARGET executable
add_executable(node_connection_test tests/node_connection_test.cpp)
set_target_properties(node_connection_test PROPERTIES
            CXX_STANDARD 17
            CXX_EXTENSIONS OFF
            )
target_compile_options(node_connection_test PRIVATE
  -funroll-loops -Ofast
  )
target_link_libraries(node_connection_test PUBLIC
  graph_core::graph_core
)

add_executable(kdtree_test tests/kdtree_test.cpp)
set_target_properties(kdtree_test PROPERTIES
            CXX_STANDARD 17
            CXX_EXTENSIONS OFF
            )
target_compile_options(kdtree_test PRIVATE
  -funroll-loops -Ofast
  )
target_link_libraries(kdtree_test PUBLIC
  graph_core::graph_core
)

# Install
install(DIRECTORY include/${PROJECT_NAME}
  DESTINATION include)

install(
  TARGETS graph_core node_connection_test kdtree_test
  EXPORT graph_coreTargets
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

set(EXPORT_CONFIGDIR "share/${PROJECT_NAME}/cmake")

install(EXPORT graph_coreTargets
  DESTINATION ${EXPORT_CONFIGDIR}
  NAMESPACE graph_core::
  FILE graph_coreTargets.cmake
)

#export(
#  EXPORT graph_coreTargets
#  FILE "${PROJECT_BINARY_DIR}/graph_coreTargets.cmake")

include(CMakePackageConfigHelpers)
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/graph_coreConfigVersion.cmake
  VERSION 0.0.1
  COMPATIBILITY AnyNewerVersion)

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/cmake_config/graph_coreConfig.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/graph_coreConfigVersion.cmake
  DESTINATION ${EXPORT_CONFIGDIR})

# make uninstall
add_custom_target("uninstall" COMMENT "Uninstall installed files")
add_custom_command(
    TARGET "uninstall"
    POST_BUILD
    COMMENT "Uninstall files with install_manifest.txt"
    COMMAND xargs rm -vf < install_manifest.txt || echo Nothing in
            install_manifest.txt to be uninstalled!
)
